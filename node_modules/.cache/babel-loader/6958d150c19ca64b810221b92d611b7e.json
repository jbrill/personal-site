{"remainingRequest":"/Users/jasonbrill/Documents/new/website/node_modules/babel-loader/lib/index.js!/Users/jasonbrill/Documents/new/website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jasonbrill/Documents/new/website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jasonbrill/Documents/new/website/src/components/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jasonbrill/Documents/new/website/src/components/Home.vue","mtime":1573095847868},{"path":"/Users/jasonbrill/Documents/new/website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jasonbrill/Documents/new/website/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jasonbrill/Documents/new/website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jasonbrill/Documents/new/website/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Base from \"./Base.vue\";\nexport default {\n  name: \"Home\",\n  components: {\n    Base: Base\n  },\n  data: function data() {\n    return {\n      connections: []\n    };\n  },\n  methods: {\n    handleRoute: function handleRoute() {\n      this.$router.push('/portfolio');\n    }\n  },\n  mounted: function mounted() {\n    var ParticleNetworkAnimation, PNA;\n\n    ParticleNetworkAnimation = PNA = function PNA() {};\n\n    PNA.prototype.init = function (canvas) {\n      this.ctx = canvas.getContext(\"2d\");\n      this.canvas = canvas;\n      this.canvas.width = window.innerWidth;\n      this.canvas.height = window.innerHeight;\n      var grd = this.ctx.createRadialGradient(75, 50, 5, 90, 60, 100);\n      grd.addColorStop(0, \"white\");\n      grd.addColorStop(1, \"transparent\");\n      this.particleNetwork = new ParticleNetwork(this); // this.bindUiActions();\n\n      return this;\n    };\n\n    var Particle = function Particle(parent, x, y) {\n      this.network = parent;\n      this.canvas = parent.canvas;\n      this.ctx = parent.ctx;\n      this.particleColor = returnRandomArrayitem(this.network.options.particleColors);\n      this.radius = getLimitedRandom(0.1, 1.5);\n      this.opacity = 0;\n      this.x = x || Math.random() * this.canvas.width;\n      this.y = y || Math.random() * this.canvas.height;\n      this.velocity = {\n        x: (Math.random() - 0.5) * parent.options.velocity,\n        y: (Math.random() - 0.5) * parent.options.velocity\n      };\n    };\n\n    Particle.prototype.update = function () {\n      if (this.opacity < 1) {\n        this.opacity += 0.01;\n      } else {\n        this.opacity = 1;\n      } // Change dir if outside map\n\n\n      if (this.x > this.canvas.width + 100 || this.x < -100) {\n        this.velocity.x = -this.velocity.x;\n      }\n\n      if (this.y > this.canvas.height + 100 || this.y < -100) {\n        this.velocity.y = -this.velocity.y;\n      } // Update position\n\n\n      this.x += this.velocity.x;\n      this.y += this.velocity.y;\n    };\n\n    Particle.prototype.draw = function () {\n      // Draw particle\n      this.ctx.beginPath();\n      this.ctx.fillStyle = this.particleColor;\n      this.ctx.globalAlpha = this.opacity;\n      this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      this.ctx.fill();\n    };\n\n    var ParticleNetwork = function ParticleNetwork(parent) {\n      this.options = {\n        velocity: 0.4,\n        // the higher the faster\n        density: 10000,\n        // the lower the denser\n        netLineDistance: 100,\n        netLineColor: \"#5DC0E8\",\n        particleColors: [\"#FFFFFF\"]\n      };\n      this.canvas = parent.canvas;\n      this.ctx = parent.ctx;\n      this.init();\n    };\n\n    ParticleNetwork.prototype.init = function () {\n      // Create particle objects\n      this.createParticles(true); // Update canvas\n\n      this.animationFrame = requestAnimationFrame(this.update.bind(this));\n    };\n\n    ParticleNetwork.prototype.createParticles = function (isInitial) {\n      // Initialise / reset particles\n      var me = this;\n      this.particles = [];\n      var quantity = this.canvas.width * this.canvas.height / this.options.density;\n\n      if (isInitial) {\n        var counter = 0;\n        clearInterval(this.createIntervalId);\n        this.createIntervalId = setInterval(function () {\n          if (counter < quantity - 1) {\n            // Create particle object\n            for (var i = 0; i < 4; i++) {\n              this.particles.push(new Particle(this));\n            }\n          } else {\n            clearInterval(me.createIntervalId);\n          }\n\n          counter++;\n        }.bind(this), 50);\n      } else {\n        // Create particle objects\n        for (var i = 0; i < quantity; i++) {\n          this.particles.push(new Particle(this));\n        }\n      }\n    };\n\n    ParticleNetwork.prototype.createInteractionParticle = function () {\n      // Add interaction particle\n      this.interactionParticle = new Particle(this);\n      this.interactionParticle.velocity = {\n        x: 0,\n        y: 0\n      };\n      this.particles.push(this.interactionParticle);\n      return this.interactionParticle;\n    };\n\n    ParticleNetwork.prototype.removeInteractionParticle = function () {\n      // Find it\n      var index = this.particles.indexOf(this.interactionParticle);\n\n      if (index > -1) {\n        // Remove it\n        this.interactionParticle = undefined;\n        this.particles.splice(index, 1);\n      }\n    };\n\n    ParticleNetwork.prototype.update = function () {\n      if (this.canvas) {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.globalAlpha = 1; // Draw connections\n\n        for (var i = 0; i < this.particles.length; i++) {\n          for (var j = this.particles.length - 1; j > i; j--) {\n            var distance,\n                p1 = this.particles[i],\n                p2 = this.particles[j]; // check very simply if the two points are even a candidate for further measurements\n\n            distance = Math.min(Math.abs(p1.x - p2.x), Math.abs(p1.y - p2.y));\n\n            if (distance > this.options.netLineDistance) {\n              continue;\n            } // the two points seem close enough, now let's measure precisely\n\n\n            distance = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n\n            if (distance > this.options.netLineDistance) {\n              continue;\n            }\n\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = this.options.netLineColor;\n            this.ctx.globalAlpha = (this.options.netLineDistance - distance) / this.options.netLineDistance * p1.opacity * p2.opacity;\n            this.ctx.lineWidth = 0.7;\n            this.ctx.moveTo(p1.x, p1.y);\n            this.ctx.lineTo(p2.x, p2.y);\n            this.ctx.stroke();\n          }\n        } // Draw particles\n\n\n        for (var i = 0; i < this.particles.length; i++) {\n          this.particles[i].update();\n          this.particles[i].draw();\n        }\n\n        if (this.options.velocity !== 0) {\n          this.animationFrame = requestAnimationFrame(this.update.bind(this));\n        }\n      } else {\n        cancelAnimationFrame(this.animationFrame);\n      }\n    };\n\n    var getLimitedRandom = function getLimitedRandom(min, max, roundToInteger) {\n      var number = Math.random() * (max - min) + min;\n\n      if (roundToInteger) {\n        number = Math.round(number);\n      }\n\n      return number;\n    };\n\n    var returnRandomArrayitem = function returnRandomArrayitem(array) {\n      return array[Math.floor(Math.random() * array.length)];\n    };\n\n    var pna = new ParticleNetworkAnimation();\n    pna.init(this.$refs.canvas);\n  }\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <Base>\n      <!-- Based off https://codepen.io/franky/pen/LGMWPK -->\n\n      <canvas @click=\"handleRoute\" ref=\"canvas\" class=\"canvas__contain\"></canvas>\n    </Base>\n  </div>\n</template>\n\n<script>\nimport Base from \"./Base.vue\";\n\nexport default {\n  name: \"Home\",\n  components: {\n    Base\n  },\n  data() {\n    return {\n      connections: []\n    };\n  },\n  methods: {\n    handleRoute() {\n       this.$router.push('/portfolio')\n    }\n  },\n  mounted() {\n    var ParticleNetworkAnimation, PNA;\n    ParticleNetworkAnimation = PNA = function() {};\n\n    PNA.prototype.init = function(canvas) {\n      this.ctx = canvas.getContext(\"2d\");\n      this.canvas = canvas;\n      this.canvas.width = window.innerWidth;\n      this.canvas.height = window.innerHeight;\n\n      var grd = this.ctx.createRadialGradient(75, 50, 5, 90, 60, 100);\n      grd.addColorStop(0, \"white\");\n      grd.addColorStop(1, \"transparent\");\n      this.particleNetwork = new ParticleNetwork(this);\n\n      // this.bindUiActions();\n\n      return this;\n    };\n\n    var Particle = function(parent, x, y) {\n      this.network = parent;\n      this.canvas = parent.canvas;\n      this.ctx = parent.ctx;\n      this.particleColor = returnRandomArrayitem(\n        this.network.options.particleColors\n      );\n      this.radius = getLimitedRandom(0.1, 1.5);\n      this.opacity = 0;\n      this.x = x || Math.random() * this.canvas.width;\n      this.y = y || Math.random() * this.canvas.height;\n      this.velocity = {\n        x: (Math.random() - 0.5) * parent.options.velocity,\n        y: (Math.random() - 0.5) * parent.options.velocity\n      };\n    };\n\n    Particle.prototype.update = function() {\n      if (this.opacity < 1) {\n        this.opacity += 0.01;\n      } else {\n        this.opacity = 1;\n      }\n      // Change dir if outside map\n      if (this.x > this.canvas.width + 100 || this.x < -100) {\n        this.velocity.x = -this.velocity.x;\n      }\n      if (this.y > this.canvas.height + 100 || this.y < -100) {\n        this.velocity.y = -this.velocity.y;\n      }\n\n      // Update position\n      this.x += this.velocity.x;\n      this.y += this.velocity.y;\n    };\n\n    Particle.prototype.draw = function() {\n      // Draw particle\n      this.ctx.beginPath();\n      this.ctx.fillStyle = this.particleColor;\n      this.ctx.globalAlpha = this.opacity;\n      this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      this.ctx.fill();\n    };\n\n    var ParticleNetwork = function(parent) {\n      this.options = {\n        velocity: 0.4, // the higher the faster\n        density: 10000, // the lower the denser\n        netLineDistance: 100,\n        netLineColor: \"#5DC0E8\",\n        particleColors: [\"#FFFFFF\"]\n      };\n      this.canvas = parent.canvas;\n      this.ctx = parent.ctx;\n\n      this.init();\n    };\n\n    ParticleNetwork.prototype.init = function() {\n      // Create particle objects\n      this.createParticles(true);\n\n      // Update canvas\n      this.animationFrame = requestAnimationFrame(this.update.bind(this));\n    };\n\n    ParticleNetwork.prototype.createParticles = function(isInitial) {\n      // Initialise / reset particles\n      var me = this;\n      this.particles = [];\n      var quantity =\n        (this.canvas.width * this.canvas.height) / this.options.density;\n\n      if (isInitial) {\n        var counter = 0;\n        clearInterval(this.createIntervalId);\n        this.createIntervalId = setInterval(\n          function() {\n            if (counter < quantity - 1) {\n              // Create particle object\n              for (var i = 0; i < 4; i++) {\n                this.particles.push(new Particle(this));\n              }\n            } else {\n              clearInterval(me.createIntervalId);\n            }\n            counter++;\n          }.bind(this),\n          50\n        );\n      } else {\n        // Create particle objects\n        for (var i = 0; i < quantity; i++) {\n          this.particles.push(new Particle(this));\n        }\n      }\n    };\n\n    ParticleNetwork.prototype.createInteractionParticle = function() {\n      // Add interaction particle\n      this.interactionParticle = new Particle(this);\n      this.interactionParticle.velocity = {\n        x: 0,\n        y: 0\n      };\n      this.particles.push(this.interactionParticle);\n      return this.interactionParticle;\n    };\n\n    ParticleNetwork.prototype.removeInteractionParticle = function() {\n      // Find it\n      var index = this.particles.indexOf(this.interactionParticle);\n      if (index > -1) {\n        // Remove it\n        this.interactionParticle = undefined;\n        this.particles.splice(index, 1);\n      }\n    };\n\n    ParticleNetwork.prototype.update = function() {\n      if (this.canvas) {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.globalAlpha = 1;\n\n        // Draw connections\n        for (var i = 0; i < this.particles.length; i++) {\n          for (var j = this.particles.length - 1; j > i; j--) {\n            var distance,\n              p1 = this.particles[i],\n              p2 = this.particles[j];\n\n            // check very simply if the two points are even a candidate for further measurements\n            distance = Math.min(Math.abs(p1.x - p2.x), Math.abs(p1.y - p2.y));\n            if (distance > this.options.netLineDistance) {\n              continue;\n            }\n\n            // the two points seem close enough, now let's measure precisely\n            distance = Math.sqrt(\n              Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)\n            );\n            if (distance > this.options.netLineDistance) {\n              continue;\n            }\n\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = this.options.netLineColor;\n            this.ctx.globalAlpha =\n              ((this.options.netLineDistance - distance) /\n                this.options.netLineDistance) *\n              p1.opacity *\n              p2.opacity;\n            this.ctx.lineWidth = 0.7;\n            this.ctx.moveTo(p1.x, p1.y);\n            this.ctx.lineTo(p2.x, p2.y);\n            this.ctx.stroke();\n          }\n        }\n\n        // Draw particles\n        for (var i = 0; i < this.particles.length; i++) {\n          this.particles[i].update();\n          this.particles[i].draw();\n        }\n\n        if (this.options.velocity !== 0) {\n          this.animationFrame = requestAnimationFrame(this.update.bind(this));\n        }\n      } else {\n        cancelAnimationFrame(this.animationFrame);\n      }\n    };\n\n    var getLimitedRandom = function(min, max, roundToInteger) {\n      var number = Math.random() * (max - min) + min;\n      if (roundToInteger) {\n        number = Math.round(number);\n      }\n      return number;\n    };\n\n    var returnRandomArrayitem = function(array) {\n      return array[Math.floor(Math.random() * array.length)];\n    };\n\n    var pna = new ParticleNetworkAnimation();\n    pna.init(this.$refs.canvas);\n  }\n};\n</script>\n\n<style>\n.canvas__contain {\n  width: 100%;\n  border-radius: 2px;\n  background: linear-gradient(\n    124deg,\n    #ff2400,\n    #e81d1d,\n    #e8b71d,\n    #e3e81d,\n    #1de840,\n    #1ddde8,\n    #2b1de8,\n    #dd00f3,\n    #dd00f3\n  );\n  background-size: 1800% 1800%;\n  background-color: #ffa531;\n  -webkit-animation: rainbow 60s ease infinite;\n  -z-animation: rainbow 60s ease infinite;\n  -o-animation: rainbow 60s ease infinite;\n  animation: rainbow 60s ease infinite;\n  transition: opacity 0.3s ease-out;\n  -moz-transition: opacity 0.3s ease-out;\n  -webkit-transition: opacity 0.3s ease-out;\n  -o-transition: opacity 0.3s ease-out;\n}\n\n@-webkit-keyframes rainbow {\n  0% {\n    background-position: 0% 82%;\n  }\n  50% {\n    background-position: 100% 19%;\n  }\n  100% {\n    background-position: 0% 82%;\n  }\n}\n@-moz-keyframes rainbow {\n  0% {\n    background-position: 0% 82%;\n  }\n  50% {\n    background-position: 100% 19%;\n  }\n  100% {\n    background-position: 0% 82%;\n  }\n}\n@-o-keyframes rainbow {\n  0% {\n    background-position: 0% 82%;\n  }\n  50% {\n    background-position: 100% 19%;\n  }\n  100% {\n    background-position: 0% 82%;\n  }\n}\n@keyframes rainbow {\n  0% {\n    background-position: 0% 82%;\n  }\n  50% {\n    background-position: 100% 19%;\n  }\n  100% {\n    background-position: 0% 82%;\n  }\n}\n\n.canvas__contain:hover {\n  opacity: 0.7;\n  cursor: pointer;\n  transition: opacity 0.3s ease-out;\n  -moz-transition: opacity 0.3s ease-out;\n  -webkit-transition: opacity 0.3s ease-out;\n  -o-transition: opacity 0.3s ease-out;\n}\n</style>\n"],"sourceRoot":"src/components"}]}